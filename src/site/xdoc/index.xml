<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.    
-->
<document>
  <properties>
    <title>Overview</title>
    <author email="server-dev@james.apache.org">James jSPF Project Team</author>
  </properties>
  <body>
    <section name="Overview">
      <p>Postage is a stand-alone application generating constant mail traffic on a James server instance. It can be considered being a load test tool.</p>
      <p>Postage records the resources used by James and supports finding resource leaks, for example memory bottlenecks.</p>
      <p>While putting load on James, Postage also records the resulting mail traffic and tries to match incoming and outgoing mail making it possible to use it for end-to-end test.</p>
      <p>It's flexible enough to mimic many real-world load scenarios, for example</p>
      <ul>
        <li>many users, each receiving few mails every day</li>
        <li>few users, heavily receiving mails</li>
        <li>moderate mail traffic, yet very big attachments</li>
      </ul>
    </section>
    <section name="Features">
      <ul>
        <li>Easy XML-file-based configuration with multiple running scenarios for different load profiles</li>
        <li>Supports unlimited number of internal and external users.</li>
        <li>Within one scenario supports different email profiles running in parallel. Every profile has its own specification in terms of</li>
          <ul>
            <li>number of generated mails per minute</li>
            <li>sender/receiver</li>
            <li>mail size</li>
          </ul>
        <li>Records incoming and outgoing mails and matches them to keep track of successful and failed deliveries</li>
        <li>Is able to record the Mail Servers thread and heap memory consumption (only Java SE 5)</li>
      </ul>
    </section>
  </body>
</document>